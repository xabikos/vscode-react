{
  "reactClassCompoment": {
    "prefix": "rcc",
    "body": "import React, {Component} from 'react';\n\nexport default class ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}",
    "description": "Creates a React component class with default export"
  },
  "reactJustClassCompoment": {
    "prefix": "rjcc",
    "body": "class ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}",
    "description": "Creates a React component class"
  },
  "reactClassCompomentPropTypes": {
    "prefix": "rccp",
    "body": "import React, {Component, PropTypes} from 'react';\n\nexport default class ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:componentName}.propTypes = {\n\t$2\n};",
    "description": "Creates a React component class with PropTypes and default export"
  },
  "reactJustClassCompomentProps": {
    "prefix": "rjccp",
    "body": "class ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:componentName}.propTypes = {\n$2\n};",
    "description": "Creates a React component class with PropTypes"
  },

  "reactMobxClassCompoment": {
    "prefix": "rmcc",
    "body": "import React, {Component, PropTypes} from 'react';\nimport {observer} from 'mobx-react';\n\n@observer\nexport default class ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}",
    "description": "Creates a MobX React component class with default export"
  },
  "reactMobxJustClassCompoment": {
    "prefix": "rmjcc",
    "body": "@observer\nclass ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}",
    "description": "Creates a MobX React component class"
  },
  "reactMobxClassCompomentProps": {
    "prefix": "rmccp",
    "body": "import React, {Component, PropTypes} from 'react';\nimport {observer} from 'mobx-react';\n\n@observer\nexport default class ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:componentName}.propTypes = {\n\t$2\n};",
    "description": "Creates a MobX React component class with PropTypes and default export"
  },
  "reactMobxJustClassCompomentProps": {
    "prefix": "rmjccp",
    "body": "@observer\nclass ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:componentName}.propTypes = {\n\t$2\n};",
    "description": "Creates a MobX React component class with PropTypes"
  },
  

  "reactClassCompomentWithMethods": {
    "prefix": "rcfc",
    "body": "import React, {Component, PropTypes} from 'react';\n\nexport default class ${1:componentName} extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t}\n\n\tcomponentWillMount() {\n\n\t}\n\n\tcomponentDidMount() {\n\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\n\t}\n\n\tshouldComponentUpdate(nextProps, nextState) {\n\n\t}\n\n\tcomponentWillUpdate(nextProps, nextState) {\n\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\n\t}\n\n\tcomponentWillUnmount() {\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:componentName}.propTypes = {\n\n};",
    "description": "Creates a React component class with PropTypes, all lifecycle methods and default export"
  },


  "reactStateless": {
    "prefix": "rsc",
    "body": "import React from 'react';\n\nexport default (${1:props}) => (\n\t<div>\n\t\t$0\n\t</div>\n);",
    "description": "Creates an inline SFC with default export"
  },
  "reactStatelessBraces": {
    "prefix": "rscb",
    "body": "import React from 'react';\n\nexport default (${1:props}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n};",
    "description": "Creates an SFC with default export"
  },
  "reactJustInlineStateless": {
    "prefix": "rjsc",
    "body": "const ${1:componentName} = (${2:props}) => (\n\t<div>\n\t\t$0\n\t</div>\n);",
    "description": "Creates an inline SFC"
  },
  "reactJustStateless": {
    "prefix": "rjscb",
    "body": "const ${1:componentName} = (${2:props}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n};",
    "description": "Creates an SFC"
  },

  "reactStatelessProps": {
    "prefix": "rscp",
    "body": "import React, {PropTypes} from 'react';\n\nconst ${1:componentName} = (${2:props}) => (\n\t<div>\n\t\t$0\n\t</div>\n);\n\n${1:componentName}.propTypes = {\n\t$3\n};\n\nexport default ${1:componentName};",
    "description": "Creates an inline SFC with PropTypes and default export"
  },
  "reactStatelessBracesProps": {
    "prefix": "rscbp",
    "body": "import React, {PropTypes} from 'react';\n\nconst ${1:componentName} = (${2:props}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n};\n\n${1:componentName}.propTypes = {\n\t$3\n};\n\nexport default ${1:componentName};",
    "description": "Creates an SFC with PropTypes and default export"
  },
  "reactJustInlineStatelessProps": {
    "prefix": "rjscp",
    "body": "const ${1:componentName} = (${2:props}) => (\n\t<div>\n\t\t$0\n\t</div>\n);\n\n${1:componentName}.propTypes = {\n\t$3\n};\n\nexport default ${1:componentName};",
    "description": "Creates an inline SFC with PropTypes"
  },
  "reactJustStatelessProps": {
    "prefix": "rjscbp",
    "body": "const ${1:componentName} = (${2:props}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n};\n\n${1:componentName}.propTypes = {\n\t$3\n};\n\nexport default ${1:componentName};",
    "description": "Creates an SFC with PropTypes"
  },



  "reactMobxStateless": {
    "prefix": "rmsc",
    "body": "import React from 'react';\nimport {observer} from 'mobx-react';\n\nexport default observer((${1:props}) => (\n\t<div>\n\t\t$0\n\t</div>\n));",
    "description": "Creates an inline MobX SFC with default export"
  },
  "reactMobxStatelessBraces": {
    "prefix": "rmscb",
    "body": "import React from 'react';\nimport {observer} from 'mobx-react';\n\nexport default observer((${1:props}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n});",
    "description": "Creates a MobX SFC with default export"
  },
  "reactJustMobxInlineStateless": {
    "prefix": "rmjsc",
    "body": "const ${1:componentName} = observer((${2:props}) => (\n\t<div>\n\t\t$0\n\t</div>\n));",
    "description": "Creates an inline MobX SFC"
  },
  "reactJustMobxStateless": {
    "prefix": "rmjscb",
    "body": "const ${1:componentName} = observer((${2:props}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n});",
    "description": "Creates a MobX SFC"
  },
  "reactMobxStatelessProps": {
    "prefix": "rmscp",
    "body": "import React from 'react';\nimport {observer} from 'mobx-react';\n\nconst ${1:componentName} = observer((${2:props}) => (\n\t<div>\n\t\t$0\n\t</div>\n));\n\n${1:componentName}.propTypes = {\n\t$3\n};\n\nexport default ${1:componentName};",
    "description": "Creates an inline MobX SFC with default export"
  },
  "reactMobxStatelessBracesProps": {
    "prefix": "rmscbp",
    "body": "import React from 'react';\nimport {observer} from 'mobx-react';\n\nconst ${1:componentName} = observer((${2:props}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n});\n\n${1:componentName}.propTypes = {\n\t$3\n};\n\nexport default ${1:componentName};",
    "description": "Creates a MobX SFC with default export"
  },
  "reactJustMobxInlineStatelessProps": {
    "prefix": "rmjscp",
    "body": "const ${1:componentName} = observer((${2:props}) => (\n\t<div>\n\t\t$0\n\t</div>\n));\n\n${1:componentName}.propTypes = {\n\t$3\n};\n\n",
    "description": "Creates an inline MobX SFC"
  },
  "reactJustMobxStatelessProps": {
    "prefix": "rmjscbp",
    "body": "const ${1:componentName} = observer((${2:props}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n});\n\n${1:componentName}.propTypes = {\n\t$3\n};\n\n",
    "description": "Creates a MobX SFC"
  },  




  "classConstructor": {
    "prefix": "con",
    "body": "constructor(props) {\n\tsuper(props);\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props as arguments"
  },
  "classConstructorContext": {
    "prefix": "conc",
    "body": "constructor(props, context) {\n\tsuper(props, context);\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props and context as arguments"
  },

  "emptyState": {
    "prefix": "est",
    "body": "this.state = {\n\t$1\n};",
    "description": "Creates an empty state object. To be used in a constructor."
  },

  "emptyStateProp": {
    "prefix": "estp",
    "body": "state = {$1};",
    "description": "Creates an empty state object. To be used as a class property."
  },

  "componentWillMount": {
    "prefix": "cwm",
    "body": "\ncomponentWillMount() {\n\t$0\n}\n",
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },

  "componentDidMount": {
    "prefix": "cdm",
    "body": "componentDidMount() {\n\t$0\n}\n",
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },

  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": "componentWillReceiveProps(nextProps) {\n\t$0\n}\n",
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render."
  },

  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked before rendering when new props or state are being received. "
  },

  "componentWillUpdate": {
    "prefix": "cwup",
    "body": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked immediately before rendering when new props or state are being received."
  },

  "componentDidUpdate": {
    "prefix": "cdup",
    "body": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },

  "componentWillUnmount": {
    "prefix": "cwun",
    "body": "componentWillUnmount() {\n\t$0\n}\n",
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },

   "componentRender": {
    "prefix": "ren",
    "body": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n}",
    "description": "When called, it should examine this.props and this.state and return a single child element."
  },

  "componentSetStateObject": {
    "prefix": "sst",
    "body": "this.setState($0);",
    "description": "Performs a shallow merge of nextState into current state"
  },

  "componentSetStateFunc": {
    "prefix": "ssf",
    "body": "this.setState((state, props) => { return { $0 }});\n",
    "description": "Performs a shallow merge of nextState into current state"
  },

  "componentProps": {
    "prefix": "props",
    "body":"this.props.$0",
    "description": "Access component's props"
  },

  "componentState": {
    "prefix": "state",
    "body": "this.state.$0",
    "description": "Access component's state"
  },

  "bindThis": {
    "prefix": "bnd",
	"body": "this.$1 = this.$1.bind(this);$0",
	"description": "Binds the this of a method. To be used inside a constructor"
  },

  "propTypes": {
	"prefix": "rpt",
	"body": "$1.propTypes = {\n\t$2\n};",
	"description": "Creates empty propTypes declaration"
  },

  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
    "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  }
}
